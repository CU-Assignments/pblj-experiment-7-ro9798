public class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    // Constructor
    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    // Getters and Setters
    public int getStudentID() { return studentID; }
    public void setStudentID(int studentID) { this.studentID = studentID; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }

    public double getMarks() { return marks; }
    public void setMarks(double marks) { this.marks = marks; }
}

import java.sql.*;

public class StudentController {
    private Connection connection;

    // Constructor: Establish database connection
    public StudentController(String dbURL, String dbUser, String dbPassword) throws SQLException {
        connection = DriverManager.getConnection(dbURL, dbUser, dbPassword);
    }

    // Create Student
    public void createStudent(Student student) throws SQLException {
        String sql = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, student.getStudentID());
            pstmt.setString(2, student.getName());
            pstmt.setString(3, student.getDepartment());
            pstmt.setDouble(4, student.getMarks());
            pstmt.executeUpdate();
            System.out.println("Student created successfully.");
        }
    }

    // Read Students
    public void readStudents() throws SQLException {
        String sql = "SELECT * FROM Student";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            System.out.println("\nStudent Data:");
            while (rs.next()) {
                System.out.printf("StudentID: %d, Name: %s, Department: %s, Marks: %.2f%n",
                        rs.getInt("StudentID"), rs.getString("Name"),
                        rs.getString("Department"), rs.getDouble("Marks"));
            }
        }
    }

    // Update Student
    public void updateStudent(Student student) throws SQLException {
        String sql = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.setInt(4, student.getStudentID());
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Student updated successfully.");
            } else {
                System.out.println("Student not found.");
            }
        }
    }

    // Delete Student
    public void deleteStudent(int studentID) throws SQLException {
        String sql = "DELETE FROM Student WHERE StudentID = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, studentID);
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Student deleted successfully.");
            } else {
                System.out.println("Student not found.");
            }
        }
    }
}

import java.util.Scanner;

public class StudentApp {
    public static void main(String[] args) {
        try {
            // Replace with your database credentials
            String dbURL = "jdbc:mysql://localhost:3306/your_database";
            String dbUser = "your_username";
            String dbPassword = "your_password";

            StudentController controller = new StudentController(dbURL, dbUser, dbPassword);
            Scanner scanner = new Scanner(System.in);

            int choice;
            do {
                System.out.println("\nMenu:");
                System.out.println("1. Create Student");
                System.out.println("2. Read Students");
                System.out.println("3. Update Student");
                System.out.println("4. Delete Student");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        System.out.print("Enter Student ID: ");
                        int studentID = scanner.nextInt();
                        System.out.print("Enter Name: ");
                        String name = scanner.next();
                        System.out.print("Enter Department: ");
                        String department = scanner.next();
                        System.out.print("Enter Marks: ");
                        double marks = scanner.nextDouble();
                        Student newStudent = new Student(studentID, name, department, marks);
                        controller.createStudent(newStudent);
                        break;
                    case 2:
                        controller.readStudents();
                        break;
                    case 3:
                        System.out.print("Enter Student ID to update: ");
                        int updateID = scanner.nextInt();
                        System.out.print("Enter new Name: ");
                        String newName = scanner.next();
                        System.out.print("Enter new Department: ");
                        String newDepartment = scanner.next();
                        System.out.print("Enter new Marks: ");
                        double newMarks = scanner.nextDouble();
                        Student updatedStudent = new Student(updateID, newName, newDepartment, newMarks);
                        controller.updateStudent(updatedStudent);
                        break;
                    case 4:
                        System.out.print("Enter Student ID to delete: ");
                        int deleteID = scanner.nextInt();
                        controller.deleteStudent(deleteID);
                        break;
                    case 5:
                        System.out.println("Exiting program.");
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } while (choice != 5);

            scanner.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
